group 'com.tinthon'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven { url "http://repo.spring.io/release" }
}

dependencies {
    compile ('org.springframework:spring-context:4.3.9.RELEASE') {
        exclude module: 'commons-logging'
    }
    compile 'org.springframework:spring-web:4.3.9.RELEASE'
    compile 'org.springframework:spring-webmvc:4.3.9.RELEASE'
    compile 'org.springframework:spring-websocket:4.3.9.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.9.RELEASE'

    compile 'org.thymeleaf:thymeleaf:3.0.6.RELEASE'
    compile 'org.thymeleaf:thymeleaf-spring4:3.0.6.RELEASE'

    compile 'mysql:mysql-connector-java:6.0.6'
    compile 'com.mchange:c3p0:0.9.5.2'
    compile 'org.mybatis:mybatis:3.4.4'
    compile 'org.mybatis:mybatis-spring:1.3.1'
    compile 'org.code-house:jackson:2.8.7'
    compile 'org.aspectj:aspectjrt:1.8.10'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    compile 'org.slf4j:slf4j-api:1.7.25'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/db.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
